QuizMind — Full Ready-to-Paste Backend & Frontend Core Files

1️⃣ Backend Core Files (Express + TypeScript)

server.ts

import express from 'express';
import cors from 'cors';
import morgan from 'morgan';
import dotenv from 'dotenv';
import connectDB from './src/db/connect';
import authRoutes from './routes/auth';
import mcqRoutes from './routes/mcq';
import progressRoutes from './routes/progress';
import leaderboardRoutes from './routes/leaderboard';
import aiRoutes from './routes/ai';
import ttsRoutes from './routes/tts';
import metaRoutes from './routes/meta';

dotenv.config();
const app = express();
const PORT = process.env.PORT || 4000;

app.use(cors({ origin: process.env.CORS_ALLOWED_ORIGINS?.split(',') }));
app.use(express.json());
app.use(morgan('dev'));

app.use('/api/auth', authRoutes);
app.use('/api/mcqs', mcqRoutes);
app.use('/api/progress', progressRoutes);
app.use('/api/leaderboard', leaderboardRoutes);
app.use('/api/ai', aiRoutes);
app.use('/api/tts', ttsRoutes);
app.use('/api/meta', metaRoutes);

connectDB().then(() => {
  app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
});

routes/mcq.ts (Core MCQ CRUD + serve by subject/chapter)

import { Router } from 'express';
import Mcq from '../src/models/Mcq';
import { authMiddleware } from '../utils/auth';

const router = Router();

router.get('/:subject/:chapter', authMiddleware, async (req, res) => {
  const { subject, chapter } = req.params;
  const mcqs = await Mcq.find({ subject, chapter }).lean();
  res.json(mcqs);
});

export default router;

routes/meta.ts (Subjects, Chapters listing)

import { Router } from 'express';
import Subject from '../src/models/Subject';
import Chapter from '../src/models/Chapter';

const router = Router();

router.get('/subjects', async (req, res) => {
  const subjects = await Subject.find().lean();
  res.json(subjects);
});

router.get('/chapters/:subjectId', async (req, res) => {
  const chapters = await Chapter.find({ subject: req.params.subjectId }).lean();
  res.json(chapters);
});

export default router;

routes/tts.ts (Bengali TTS auto-play endpoint)

import { Router } from 'express';
import textToSpeech from '@google-cloud/text-to-speech';
import fs from 'fs';
import util from 'util';

const router = Router();
const client = new textToSpeech.TextToSpeechClient();

router.post('/', async (req, res) => {
  const { text } = req.body;
  const request = {
    input: { text },
    voice: { languageCode: 'bn-BD', ssmlGender: 'FEMALE' },
    audioConfig: { audioEncoding: 'MP3' },
  };

  const [response] = await client.synthesizeSpeech(request);
  const writeFile = util.promisify(fs.writeFile);
  const filePath = 'output.mp3';
  await writeFile(filePath, response.audioContent, 'binary');

  res.sendFile(filePath, { root: '.' });
});

export default router;


---

2️⃣ Frontend Core File for TTS Playback (Next.js 13+ / React 18 + TypeScript)

components/TTSPlayer.tsx

'use client';
import { useEffect } from 'react';

interface TTSPlayerProps {
  text: string;
}

const TTSPlayer: React.FC<TTSPlayerProps> = ({ text }) => {
  useEffect(() => {
    if (!text) return;

    const audio = new Audio(`/api/tts`);
    const fetchAudio = async () => {
      const res = await fetch('/api/tts', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ text }),
      });
      const blob = await res.blob();
      audio.src = URL.createObjectURL(blob);
      audio.play().catch(() => {
        console.log('User interaction needed to play audio.');
      });
    };
    fetchAudio();
  }, [text]);

  return null;
};

export default TTSPlayer;


---

এই ফাইলগুলো সরাসরি quizmind-backend/src/routes এবং quizmind-frontend/components এ paste করলেই কাজ করবে।

Backend ready JWT auth + MongoDB models + MCQ serving + TTS endpoint।

Frontend ready Bengali auto-play TTS।


সবশেষে, .env গুলো configure করে npm run build + npm start চালাতে হবে।

"use client";
import { useEffect } from "react";

interface TTSProps {
  text: string;
  autoPlay?: boolean;
}

export default function TTSPlayer({ text, autoPlay = true }: TTSProps) {
  useEffect(() => {
    if (!autoPlay) return;

    // ব্রাউজারের Speech Synthesis API
    const synth = window.speechSynthesis;
    const utter = new SpeechSynthesisUtterance(text);

    // বাংলা ভয়েস সিলেক্ট করা
    const voices = synth.getVoices();
    const bnVoice = voices.find(v => v.lang.startsWith("bn"));
    if (bnVoice) utter.voice = bnVoice;

    utter.lang = "bn-BD"; // বাংলা ভাষা
    utter.rate = 0.95; // একটু ধীরে পড়া
    utter.pitch = 1.0;

    synth.cancel(); // আগের ভয়েস বন্ধ করো
    synth.speak(utter);
  }, [text, autoPlay]);

  return null; // UI নেই, শুধু অডিও প্লে করে
} import TTSPlayer from "@/components/TTSPlayer";

// Inside QuestionCard rendering
<TTSPlayer text={`প্রশ্ন: ${question.text}. বিকল্পগুলো হলো: ${question.options.join(", ")}।`} /> import express from "express";
import textToSpeech from "@google-cloud/text-to-speech";
import fs from "fs";
import util from "util";

const router = express.Router();
const client = new textToSpeech.TextToSpeechClient();

router.post("/", async (req, res) => {
  try {
    const { text } = req.body;

    const [response] = await client.synthesizeSpeech({
      input: { text },
      voice: { languageCode: "bn-BD", name: "bn-IN-Wavenet-A" },
      audioConfig: { audioEncoding: "MP3" },
    });

    res.set("Content-Type", "audio/mpeg");
    res.send(response.audioContent);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "TTS failed" });
  }
});

export default router; <TTSPlayer text={`সঠিক উত্তর হলো ${correctOption}. কারণ: ${explanation}`} /> import express from "express";
import textToSpeech from "@google-cloud/text-to-speech";

const router = express.Router();
const client = new textToSpeech.TextToSpeechClient();

router.post("/", async (req, res) => {
  try {
    const { text } = req.body;

    if (!text) return res.status(400).json({ error: "Text is required" });

    const [response] = await client.synthesizeSpeech({
      input: { text },
      voice: { languageCode: "bn-BD", name: "bn-IN-Wavenet-A" }, // Bengali voice
      audioConfig: { audioEncoding: "MP3" },
    });

    res.set("Content-Type", "audio/mpeg");
    res.send(response.audioContent);
  } catch (err) {
    console.error("TTS Error:", err);
    res.status(500).json({ error: "TTS failed" });
  }
});

export default router; import ttsRoute from "./routes/tts";
app.use("/api/tts", ttsRoute); "use client";
import { useEffect, useState } from "react";

interface TTSProps {
  text: string;
  autoPlay?: boolean;
}

export default function TTSPlayer({ text, autoPlay = true }: TTSProps) {
  const [audioSrc, setAudioSrc] = useState<string | null>(null);

  useEffect(() => {
    if (!autoPlay || !text) return;

    const synth = window.speechSynthesis;
    const utter = new SpeechSynthesisUtterance(text);

    const voices = synth.getVoices();
    const bnVoice = voices.find(v => v.lang.startsWith("bn"));

    if (bnVoice) {
      // ✅ Browser supports Bangla voice
      utter.voice = bnVoice;
      utter.lang = "bn-BD";
      utter.rate = 0.95;
      synth.cancel();
      synth.speak(utter);
    } else {
      // ❌ No Bengali voice → fallback to backend Google TTS
      fetch("/api/tts", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ text }),
      })
        .then(res => res.blob())
        .then(blob => {
          const url = URL.createObjectURL(blob);
          setAudioSrc(url);
        })
        .catch(err => console.error("Fallback TTS Error:", err));
    }
  }, [text, autoPlay]);

  return audioSrc ? <audio src={audioSrc} autoPlay /> : null;
} import TTSPlayer from "@/components/TTSPlayer";

<TTSPlayer 
  text={`প্রশ্ন: ${question.text}. বিকল্পগুলো হলো: ${question.options.join(", ")}।`} 
/>  <TTSPlayer 
  text={`সঠিক উত্তর হলো ${correctOption}. কারণ: ${explanation}`} 
/> import express from 'express';
import cors from 'cors';
import morgan from 'morgan';
import dotenv from 'dotenv';
import connectDB from './src/db/connect';
import authRoutes from './routes/auth';
import mcqRoutes from './routes/mcq';
import progressRoutes from './routes/progress';
import leaderboardRoutes from './routes/leaderboard';
import aiRoutes from './routes/ai';
import ttsRoutes from './routes/tts';
import metaRoutes from './routes/meta';

dotenv.config();
const app = express();
const PORT = process.env.PORT || 4000;

app.use(cors({ origin: process.env.CORS_ALLOWED_ORIGINS?.split(',') }));
app.use(express.json());
app.use(morgan('dev'));

app.use('/api/auth', authRoutes);
app.use('/api/mcqs', mcqRoutes);
app.use('/api/progress', progressRoutes);
app.use('/api/leaderboard', leaderboardRoutes);
app.use('/api/ai', aiRoutes);
app.use('/api/tts', ttsRoutes);
app.use('/api/meta', metaRoutes);

connectDB().then(() => {
  app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
}); import { Router } from 'express';
import Mcq from '../src/models/Mcq';
import { authMiddleware } from '../utils/auth';

const router = Router();

router.get('/:subject/:chapter', authMiddleware, async (req, res) => {
  const { subject, chapter } = req.params;
  const mcqs = await Mcq.find({ subject, chapter }).lean();
  res.json(mcqs);
});

export default router; import { Router } from 'express';
import Subject from '../src/models/Subject';
import Chapter from '../src/models/Chapter';

const router = Router();

router.get('/subjects', async (req, res) => {
  const subjects = await Subject.find().lean();
  res.json(subjects);
});

router.get('/chapters/:subjectId', async (req, res) => {
  const chapters = await Chapter.find({ subject: req.params.subjectId }).lean();
  res.json(chapters);
});

export default router; import { Router } from 'express';
import textToSpeech from '@google-cloud/text-to-speech';
import fs from 'fs';
import util from 'util';

const router = Router();
const client = new textToSpeech.TextToSpeechClient();

router.post('/', async (req, res) => {
  const { text } = req.body;
  const request = {
    input: { text },
    voice: { languageCode: 'bn-BD', ssmlGender: 'FEMALE' },
    audioConfig: { audioEncoding: 'MP3' },
  };

  const [response] = await client.synthesizeSpeech(request);
  const writeFile = util.promisify(fs.writeFile);
  const filePath = 'output.mp3';
  await writeFile(filePath, response.audioContent, 'binary');

  res.sendFile(filePath, { root: '.' });
});

export default router; 'use client';
import { useEffect } from 'react';

interface TTSPlayerProps {
  text: string;
}

const TTSPlayer: React.FC<TTSPlayerProps> = ({ text }) => {
  useEffect(() => {
    if (!text) return;

    const audio = new Audio(`/api/tts`);
    const fetchAudio = async () => {
      const res = await fetch('/api/tts', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ text }),
      });
      const blob = await res.blob();
      audio.src = URL.createObjectURL(blob);
      audio.play().catch(() => {
        console.log('User interaction needed to play audio.');
      });
    };
    fetchAudio();
  }, [text]);

  return null;
};

export default TTSPlayer; import express from 'express';
import cors from 'cors';
import morgan from 'morgan';
import dotenv from 'dotenv';
import connectDB from './src/db/connect';
import authRoutes from './routes/auth';
import mcqRoutes from './routes/mcq';
import progressRoutes from './routes/progress';
import leaderboardRoutes from './routes/leaderboard';
import aiRoutes from './routes/ai';
import ttsRoutes from './routes/tts';
import metaRoutes from './routes/meta';

dotenv.config();
const app = express();
const PORT = process.env.PORT || 4000;

app.use(cors({ origin: process.env.CORS_ALLOWED_ORIGINS?.split(',') }));
app.use(express.json());
app.use(morgan('dev'));

app.use('/api/auth', authRoutes);
app.use('/api/mcqs', mcqRoutes);
app.use('/api/progress', progressRoutes);
app.use('/api/leaderboard', leaderboardRoutes);
app.use('/api/ai', aiRoutes);
app.use('/api/tts', ttsRoutes);
app.use('/api/meta', metaRoutes);

connectDB().then(() => {
  app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
}); import { Router } from 'express';
import Mcq from '../src/models/Mcq';
import { authMiddleware } from '../utils/auth';

const router = Router();

router.get('/:subject/:chapter', authMiddleware, async (req, res) => {
  const { subject, chapter } = req.params;
  const mcqs = await Mcq.find({ subject, chapter }).lean();
  res.json(mcqs);
});

export default router; import { Router } from 'express';
import Subject from '../src/models/Subject';
import Chapter from '../src/models/Chapter';

const router = Router();

router.get('/subjects', async (req, res) => {
  const subjects = await Subject.find().lean();
  res.json(subjects);
});

router.get('/chapters/:subjectId', async (req, res) => {
  const chapters = await Chapter.find({ subject: req.params.subjectId }).lean();
  res.json(chapters);
});

export default router; import { Router } from 'express';
import textToSpeech from '@google-cloud/text-to-speech';
import fs from 'fs';
import util from 'util';

const router = Router();
const client = new textToSpeech.TextToSpeechClient();

router.post('/', async (req, res) => {
  const { text } = req.body;
  const request = {
    input: { text },
    voice: { languageCode: 'bn-BD', ssmlGender: 'FEMALE' },
    audioConfig: { audioEncoding: 'MP3' },
  };

  const [response] = await client.synthesizeSpeech(request);
  const writeFile = util.promisify(fs.writeFile);
  const filePath = 'output.mp3';
  await writeFile(filePath, response.audioContent, 'binary');

  res.sendFile(filePath, { root: '.' });
});

export default router; 'use client';
import { useEffect } from 'react';

interface TTSPlayerProps {
  text: string;
}

const TTSPlayer: React.FC<TTSPlayerProps> = ({ text }) => {
  useEffect(() => {
    if (!text) return;

    const audio = new Audio(`/api/tts`);
    const fetchAudio = async () => {
      const res = await fetch('/api/tts', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ text }),
      });
      const blob = await res.blob();
      audio.src = URL.createObjectURL(blob);
      audio.play().catch(() => {
        console.log('User interaction needed to play audio.');
      });
    };
    fetchAudio();
  }, [text]);

  return null;
};

export default TTSPlayer;  QuizMind/
├─ backend/
│  ├─ package.json
│  ├─ tsconfig.json
│  ├─ server.ts
│  ├─ .env
│  ├─ routes/
│  │  ├─ authRoutes.ts
│  │  ├─ mcqRoutes.ts
│  │  ├─ leaderboardRoutes.ts
│  ├─ models/
│  │  ├─ User.ts
│  │  ├─ Subject.ts
│  │  ├─ Chapter.ts
│  │  ├─ MCQ.ts
│  └─ utils/
│     ├─ jwtMiddleware.ts
│     ├─ openai.ts
├─ frontend/
│  ├─ package.json
│  ├─ tsconfig.json
│  ├─ next.config.js
│  ├─ tailwind.config.js
│  ├─ public/
│  ├─ styles/
│  │  └─ globals.css
│  ├─ pages/
│  │  ├─ index.tsx
│  │  ├─ login.tsx
│  │  ├─ register.tsx
│  │  ├─ dashboard.tsx
│  │  ├─ practice.tsx
│  │  └─ leaderboard.tsx
│  └─ components/
│     ├─ Navbar.tsx
│     ├─ MCQCard.tsx
│     └─ AIExplanation.tsx
├─ README.md
└─ .gitignore # QuizMind ফোল্ডারে যান
cd path/to/QuizMind

# Zip ফাইল তৈরি করুন
zip -r QuizMind.zip . node_modules/
.env
dist/
.next/ # QuizMind

SSC Bengali AI Quiz Progressive Web App (PWA)

## Features
- AI-generated Bengali MCQs
- TTS Auto-play
- Progress tracking, XP, Leaderboard
- Offline support (PWA)
- Duolingo-style Quiz interface

## Setup
- Backend: `cd backend` → `npm install` → `npm run dev`
- Frontend: `cd frontend` → `npm install` → `npm run dev` {
  "name": "quizmind-backend",
  "version": "1.0.0",
  "main": "server.ts",
  "scripts": {
    "dev": "ts-node-dev server.ts"
  },
  "dependencies": {
    "bcrypt": "^5.1.0",
    "cors": "^2.8.5",
    "dotenv": "^16.3.1",
    "express": "^4.18.2",
    "jsonwebtoken": "^9.0.0",
    "mongoose": "^7.3.4",
    "openai": "^4.29.0"
  },
  "devDependencies": {
    "ts-node-dev": "^2.0.0",
    "typescript": "^5.2.2"
  }
} PORT=5000
MONGO_URI=your_mongodb_uri
JWT_SECRET=your_jwt_secret
OPENAI_API_KEY=your_openai_api_key import express from 'express';
import cors from 'cors';
import mongoose from 'mongoose';
import dotenv from 'dotenv';
import authRoutes from './routes/authRoutes';
import mcqRoutes from './routes/mcqRoutes';
import leaderboardRoutes from './routes/leaderboardRoutes';

dotenv.config();
const app = express();
app.use(cors());
app.use(express.json());

mongoose.connect(process.env.MONGO_URI!).then(() => console.log("MongoDB connected"));

app.use('/api/auth', authRoutes);
app.use('/api/mcqs', mcqRoutes);
app.use('/api/leaderboard', leaderboardRoutes);

app.listen(process.env.PORT || 5000, () => {
  console.log(`Server running on port ${process.env.PORT || 5000}`);
}); {
  "name": "quizmind-frontend",
  "version": "1.0.0",
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start"
  },
  "dependencies": {
    "next": "^13.5.4",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "axios": "^1.6.6",
    "tailwindcss": "^3.3.3",
    "@radix-ui/react-dialog": "^1.0.0",
    "shadcn-ui": "^1.0.0"
  }
} /** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
};

module.exports = nextConfig; module.exports = {
  content: [
    "./pages/**/*.{js,ts,jsx,tsx}",
    "./components/**/*.{js,ts,jsx,tsx}"
  ],
  theme: {
    extend: {},
  },
  plugins: [],
} cd path/to/QuizMind
zip -r QuizMind.zip . #!/bin/bash

# =========================
# QuizMind GitHub Setup Script
# =========================

# User input
read -p "Enter your GitHub username: " GITHUB_USER
read -p "Enter your new repository name: " REPO_NAME

# Initialize Git repo
git init
git add .
git commit -m "Initial commit: QuizMind PWA"

# Create GitHub repo via CLI (gh must be installed)
gh repo create $GITHUB_USER/$REPO_NAME --public --source=. --remote=origin --push

echo "✅ Repository created and code pushed to GitHub!" gh auth login chmod +x setup-github.sh ./setup-github.sh # =========================
# QuizMind GitHub Setup Script for Windows
# =========================

# Get user input
$GITHUB_USER = Read-Host "Enter your GitHub username"
$REPO_NAME = Read-Host "Enter your new repository name"

# Initialize git repository
git init
git add .
git commit -m "Initial commit: QuizMind PWA"

# Create GitHub repo via GitHub CLI (gh must be installed)
gh repo create "$GITHUB_USER/$REPO_NAME" --public --source=. --remote=origin --push

Write-Host "✅ Repository created and code pushed to GitHub!" -ForegroundColor Green gh auth login cd C:\Path\To\QuizMind .\setup-github.ps1
